/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from "@tanstack/react-router";

import { Route as rootRouteImport } from "./routes/__root";
import { Route as UserRouteImport } from "./routes/user";
import { Route as LoginRouteImport } from "./routes/login";
import { Route as IndexRouteImport } from "./routes/index";

const UserRoute = UserRouteImport.update({
  id: "/user",
  path: "/user",
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: "/login",
  path: "/login",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/user": typeof UserRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/user": typeof UserRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRoute;
  "/login": typeof LoginRoute;
  "/user": typeof UserRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/login" | "/user";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/login" | "/user";
  id: "__root__" | "/" | "/login" | "/user";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  LoginRoute: typeof LoginRoute;
  UserRoute: typeof UserRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/login": {
      id: "/login";
      path: "/login";
      fullPath: "/login";
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/user": {
      id: "/user";
      path: "/user";
      fullPath: "/user";
      preLoaderRoute: typeof UserRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

declare module "./routes/index" {
  const createFileRoute: CreateFileRoute<
    "/",
    FileRoutesByPath["/"]["parentRoute"],
    FileRoutesByPath["/"]["id"],
    FileRoutesByPath["/"]["path"],
    FileRoutesByPath["/"]["fullPath"]
  >;
}
declare module "./routes/login" {
  const createFileRoute: CreateFileRoute<
    "/login",
    FileRoutesByPath["/login"]["parentRoute"],
    FileRoutesByPath["/login"]["id"],
    FileRoutesByPath["/login"]["path"],
    FileRoutesByPath["/login"]["fullPath"]
  >;
}
declare module "./routes/user" {
  const createFileRoute: CreateFileRoute<
    "/user",
    FileRoutesByPath["/user"]["parentRoute"],
    FileRoutesByPath["/user"]["id"],
    FileRoutesByPath["/user"]["path"],
    FileRoutesByPath["/user"]["fullPath"]
  >;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  UserRoute: UserRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
